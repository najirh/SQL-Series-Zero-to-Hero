-- 5 SQL questions from my book **1000+ SQL Interview Questions & Answers by Zero Analyst**

-- ---------------------------------
-- Q.1
-- ---------------------------------

-- Q.1
-- Medium
-- Find the total revenue generated by each product category for Flipkart.

-- Products table
CREATE TABLE products (
    product_id INT PRIMARY KEY,
    product_name VARCHAR(50),
    category VARCHAR(50),
    price DECIMAL(10, 2)
);

-- Orders table
CREATE TABLE orders (
    order_id INT PRIMARY KEY,
    product_id INT,
    quantity INT,
    FOREIGN KEY (product_id) REFERENCES products(product_id)
);

-- Sample data for products
INSERT INTO products (product_id, product_name, category, price)
VALUES
    (1, 'Smartphone', 'Electronics', 15000.00),
    (2, 'Shoes', 'Footwear', 2000.00),
    (3, 'Laptop', 'Electronics', 50000.00),
    (4, 'T-shirt', 'Clothing', 500.00),
    (5, 'Headphones', 'Electronics', 1500.00);

-- Sample data for orders
INSERT INTO orders (order_id, product_id, quantity)
VALUES
    (1, 1, 3),
    (2, 2, 4),
    (3, 3, 2),
    (4, 4, 10),
    (5, 5, 5);

SELECT * FROM products;
SELECT * FROM orders;

SELECT 
	p.category,
	SUM(p.price * o.quantity)
FROM orders as o
JOIN
products as p
ON p.product_id = o.product_id
GROUP BY p.category

-- ---------------------------------
-- Q.2
-- ---------------------------------
-- Q. 2
-- Write an SQL query to find the name of the product with the highest price in each country.
-- Hard

-- DROP TABLE products;
-- DROP TABLE orders;


-- Table creation and sample data
CREATE TABLE suppliers(
    supplier_id INT PRIMARY KEY,
    supplier_name VARCHAR(25),
    country VARCHAR(25)
);

INSERT INTO suppliers
VALUES
    (501, 'alan', 'India'),
    (502, 'rex', 'US'),
    (503, 'dodo', 'India'),
    (504, 'rahul', 'US'),
    (505, 'zara', 'Canada'),
    (506, 'max', 'Canada');

CREATE TABLE products(
    product_id INT PRIMARY KEY,
    product_name VARCHAR(25),
    supplier_id INT,
    price FLOAT,
    FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id)
);

INSERT INTO products
VALUES
    (201, 'iPhone 14', 501, 1299),
    (202, 'iPhone 8', 502, 999),
    (204, 'iPhone 13', 502, 1199),
    (203, 'iPhone 11', 503, 1199),
    (205, 'iPhone 12', 502, 1199),
    (206, 'iPhone 14', 501, 1399),
    (214, 'iPhone 15', 503, 1499),
    (207, 'iPhone 15', 505, 1499),
    (208, 'iPhone 15', 504, 1499),
    (209, 'iPhone 12', 502, 1299),
    (210, 'iPhone 13', 502, 1199),
    (211, 'iPhone 11', 501, 1099),
    (212, 'iPhone 14', 503, 1399),
    (213, 'iPhone 8', 502, 1099),
    -- adding more products
    (222, 'Samsung Galaxy S21', 504, 1699),
    (223, 'Samsung Galaxy S20', 505, 1899),
    (224, 'Google Pixel 6', 501, 899),
    (225, 'Google Pixel 5', 502, 799),
    (226, 'OnePlus 9 Pro', 503, 1699),
    (227, 'OnePlus 9', 502, 1999),
    (228, 'Xiaomi Mi 11', 501, 899),
    (229, 'Xiaomi Mi 10', 504, 699),
    (230, 'Huawei P40 Pro', 505, 1099),
    (231, 'Huawei P30', 502, 1299),
    (232, 'Sony Xperia 1 III', 503, 1199),
    (233, 'Sony Xperia 5 III', 501, 999),
    (234, 'LG Velvet', 505, 1899),
    (235, 'LG G8 ThinQ', 504, 799),
    (236, 'Motorola Edge Plus', 502, 1099),
    (237, 'Motorola One 5G', 501, 799),
    (238, 'ASUS ROG Phone 5', 503, 1999),
    (239, 'ASUS ZenFone 8', 504, 999),
    (240, 'Nokia 8.3 5G', 502, 899),
    (241, 'Nokia 7.2', 501, 699),
    (242, 'BlackBerry Key2', 504, 1899),
    (243, 'BlackBerry Motion', 502, 799),
    (244, 'HTC U12 Plus', 501, 899),
    (245, 'HTC Desire 20 Pro', 505, 699),
    (246, 'Lenovo Legion Phone Duel', 503, 1499),
    (247, 'Lenovo K12 Note', 504, 1499),
    (248, 'ZTE Axon 30 Ultra', 501, 1299),
    (249, 'ZTE Blade 20', 502, 1599),
    (250, 'Oppo Find X3 Pro', 503, 1999);

-- Sample data for Supplier and Product tables
SELECT * FROM suppliers;
SELECT * FROM products;

WITH ranked_table
AS
(SELECT 
	s.country,
	p.product_name,
	p.price,
	ROW_NUMBER() OVER(PARTITION BY s.country ORDER BY p.price desc) as rn
FROM products as p
JOIN
suppliers as s
ON s.supplier_id = p.supplier_id
)
SELECT * FROM ranked_table
WHERE rn = 1

-- ---------------------------------
-- Q.3
-- ---------------------------------
-- Q.3
-- Case Statement

/*
**Employee Tenure and Salary Adjustment**

For each employee, determine if they are 
eligible for a salary increase based on their years of service. 
If an employee has been with the company for 5 years or more, 
they are eligible for a '10% Increase'. If they have been with 
the company for less than 5 years but more than 2 years, they are 
eligible for a '5% Increase'. Employees with less than 2 years are not eligible for any increase.
*/


CREATE TABLE Employees (
    EmployeeID INT,
    EmployeeName VARCHAR(100),
    HireDate DATE,
    Salary DECIMAL(10, 2)
);


INSERT INTO Employees VALUES
-- (1, 'John Doe', '2018-03-01', 50000),
-- (2, 'Alice Smith', '2021-06-15', 45000),
-- (3, 'Bob Brown', '2017-09-20', 60000),
-- (4, 'Charlie Davis', '2019-11-01', 55000),
-- (5, 'Eve Harris', '2022-01-10', 40000),
-- (6, 'Frank Black', '2020-05-15', 48000),
-- (7, 'Grace White', '2015-12-12', 70000),
(8, 'Alan', '2024-01-01', 65500);


SELECT *,
	CASE
		WHEN 
		EXTRACT(YEAR FROM CURRENT_DATE) - EXTRACT(YEAR FROM hiredate) >= 5 THEN '10% raise'
		WHEN 
			EXTRACT(YEAR FROM CURRENT_DATE) - EXTRACT(YEAR FROM hiredate) BETWEEN 2 AND 4
			THEN '5%'
		ELSE 'No raise'
	END
		
FROM employees;



-- ---------------------------------
-- Q.4
-- ---------------------------------


-- UBER
-- Write a query to find the total number of rides each user has taken.
-- Q -- 4

CREATE TABLE rides (
    ride_id INT PRIMARY KEY,
    user_id INT,
    ride_date TIMESTAMP,
    ride_distance DECIMAL(10, 2),
    fare DECIMAL(10, 2)
);


-- Rides
INSERT INTO rides (ride_id, user_id, ride_date, ride_distance, fare)
VALUES
    (1, 101, '2023-01-01 08:00:00', 5.0, 15.50),
    (2, 102, '2023-01-01 09:00:00', 10.0, 25.00),
    (3, 101, '2023-01-02 10:00:00', 3.5, 10.00),
    (4, 103, '2023-01-02 11:00:00', 7.0, 18.50),
    (5, 101, '2023-01-03 12:00:00', 4.0, 12.00);



SELECT * FROM rides;

SELECT
	user_id,
	COUNT(ride_id),
	SUM(fare) as total_spent
FROM rides
GROUP BY 1



-- ---------------------------------
-- Q.5
-- ---------------------------------

-- Question NO - 789
-- Q5
-- Question Job ROLE
-- Find employees who attended work for three consecutive days.


CREATE TABLE attendance (
    employee_id INT,
    attendance_date DATE
);

INSERT INTO attendance (employee_id, attendance_date)
VALUES
    (1, '2025-01-10'),
    (1, '2025-01-11'),
    (1, '2025-01-12'),
    (2, '2025-01-10'),
    (2, '2025-01-12'),
    (2, '2025-01-13'),
    (3, '2025-01-10'),
    (3, '2025-01-11'),
    (3, '2025-01-12'),
    (3, '2025-01-13');


SELECT 
	DISTINCT employee_id
FROM
(SELECT 
employee_id,
attendance_date as cur_date,
LAG(attendance_date) OVER(PARTITION BY employee_id ORDER BY attendance_date) prev_date,
LEAD(attendance_date) OVER(PARTITION BY employee_id ORDER BY attendance_date) next_date
FROM attendance
) a
WHERE 
	cur_date = prev_date + INTERVAL '1 day'
	AND
	cur_date = next_date - INTERVAL '1 day';

-- ---------------------------------
-- Q.5 END
-- ---------------------------------


